//////////////////////////////////////////////////////////////////////////////////////////////////////
// 1) Написать ответ - почему массивы в JS являются "неправильными" 
//и совмещают в себе несколько структур данных? Какие ?

/*
Ответ: Хоть массивы в JS и расширяют объекты, но в основе все равно лежит объект.
       Массвы в JS можно использовать как объекты, добавлять именованные свойства.
       (это не рекомендуется, т к нарушает внутренние оптимизации)
       Поэтому массивы в JS могут иметь функционал Хэш-таблиц.
       Также методы массва в JS позволяют использовать массив как Stack и как Queue.
*/

/////////////////////////////////////////////////////////////////////////////////////////////////////
// 2) Привязать контекст объекта к функции logger,
// чтобы при вызове this.item выводило - some value (Привязать через bind, call, apply)

function logger() {
    console.log(`I output only external context: ${this.item}`);
}

const obj = { item: "some value" };
const loggerBinded = logger.bind(obj)

loggerBinded()         // I output only external context: some value
logger.call(obj)      // I output only external context: some value
logger.apply(obj)    // I output only external context: some value

//////////////////////////////////////////////////////////////////////////////////////////////////////
//Бонус задание: Реализовать полифил(собственную функцию реализующую встроенную в js) метода bind()

function polifillBind() {
    //проверка на существование метода
    if (!Function.prototype.bind) {
    // Объявляем функцию
        function bind(obj, ...args) {
    // Чтобы взять контекст  от сюда возвращаем стрелочную функцию
            return () => {
                this.call(obj, ...args)
            }
        }
    // записываем метод в прототип
        Function.prototype.bind = bind
    }
}

// наслаждаемся полифилом))
polifillBind()
