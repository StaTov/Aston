/////////////// 
OPTIONS: 
O - метод HTTP, безопасный, идемпотентный. 
Не имеет тела запроса, но имеет тело ответа.

Может отправляться явно и неявно.

Явно - для получения инофрмации с сервера о разрешенных методах // curl -X OPTIONS http://example.org -i
Неявно - в составе preflight // CORS

Перед отправкой "непростого" запроса на сервер, браузер должен убедиться - готов ли сервер обрабатывать этот запрос?
Для этого существует предзапрос - preflight.

preflight использует метод OPTIONS
Метод не содержит тела, но имеет 3 заголовка.

Origin - источник
Access-Control-Request-Methods - метод(ы)
Access-Control-Request-Headers - заголовок(ки)

Сервер отвечает

Access-Control-Allow-Origin
Access-Control-Allow-Headres
Access-Control-Allow-Methods
Access-Control-Max-Age -- //кеширует preflight

Если заголвки и методы совпадают, то бразер посылает запрос для проверки CORS.
И дальше все как обычно...

/////////////////////
HTTP3

Это новая версия протокола.
Особенности:
HTTP3 использует новый протокол QUIC. Этот протокол основан на UDP/
QUIC имеет надежность TCP и скорость UDP.
1. Бытрая установка соединения(QUIC включает TSL 1.3 - зашифрованное соединение устанавливается сразу, 
колличество рукопожатий - 3, при повторном соединении данные отправляются одновременно с рукопожатием. 
Плюсы: высокая скорость при высокой безопасности).
2. Быстрая доставка и контроль за целостностью пакетов.
3. Мультиплексирование работает иначе. При потере пакета продолжается загрузка остальных потоков, чего не было в HTTP2
4. HTTP/3 использует QUIC на транспортном уровне и уровне безопасности. QUIC заменяет TCP и TLS.
5. Другой механизм сжатия заголовков. UPACK
6. В QUIC вместо адресов и портов используется идентификатор соединения — Connection UUID. И он не меняется при переходе от Wi-Fi на мобильную сеть.
 А значит, соединение остаётся, и ничего не нужно открывать заново.


/////////
создание примитивных значений

////string
let str1 = 'string';
let str2 = '' + 129;
////number
let num1 = 6;
let num2 = Number('129');
////boolean
let b1 = 3 > 0;
let b2 = Boolean(4);
////null
let n1 = null;
const n2 = null;
////undefined
let a; 
a;  // undefined
let obj = {};
obj.name; // undefined
////symbol
let s1 = Symbol();
let s2 = Symbol();
////bigint
let big1 = 5n;
let big2 = BigInt(5);

/////////
ReferenceError
Мы получаем эту ошибку т. к. всплытие этих переменных происходит с мертвой зоной. 
TDZ - temporary dead zone. Поэтому эти переменный мы не можем использовать до их объявления, 
в отличие от переменных var.

//////////
const res = "B" + "a" + (1 - "hello");
console.log(res);                          // "BaNaN"

const res2 = (true && 3) + "d";
console.log(res2);                         // "3d"

const res3 = Boolean(true && 3) + "d";
console.log(res3);                         // "trued"

